@page
@model IndexModel
@{
    ViewData["Title"] = "Profil";
    ViewData["ActivePage"] = ManageNavPages.Index;
}
<head>
    <link rel="stylesheet" href="~/css/Progressbar.css" />
</head>
<h3>@ViewData["Title"]</h3>
<partial name="_StatusMessage" for="StatusMessage" />
<div class="row">
    <div class="col-md-3">
        <div class="user-avatar">
            @if (User.Identity.IsAuthenticated)
            {
                var avatarPath = "/images/avatars/defaultavatar.jpg";
                <div style="display: flex; flex-direction: column">
                    <img id="avatar-image" src="@avatarPath" alt="Avatar" width="100" height="100" />
                    <input type="file" id="avatar-input" style="display: none;" />
                    <button style="max-width: 150px" id="change-avatar-button" class="btn btn-secondary mt-2" asp-controller="AvatarShop" asp-action="PurchasedAvatars">Zmień zdjęcie</button>

                </div>
            }
        </div>
    </div>
    <div class="col-md-6">
        <form id="profile-form" method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger" role="alert"></div>
            <div class="form-floating mb-3">
                <input asp-for="Username" class="form-control" placeholder="Please choose your username." disabled />
                <label asp-for="Username" class="form-label"></label>
            </div>
            <div class="form-floating mb-3">
                <input asp-for="Input.PhoneNumber" class="form-control" placeholder="Please enter your phone number." />
                <label asp-for="Input.PhoneNumber" class="form-label"></label>
                <span asp-validation-for="Input.PhoneNumber" class="text-danger"></span>
            </div>
            <button id="update-profile-button" type="submit" class="w-100 btn btn-lg btn-primary">Zapisz</button>
        </form>
    </div>
</div>
<div class="row mt-3">
    <div class="col-md-6">
        <p>Monety: @Model.Coins</p>
        <p>Punkty: @Model.Points</p>
      @*   <p>Level: @Model.Level</p> *@
    </div>
</div>
<div id="progress-bar--container">
    <svg viewBox="0 0 100 100">
        <circle stroke="#EAEAEA" stroke-width="5.5" cx="50" cy="50" r="30" fill="none" />
        <circle id="progress--circle" stroke="#28411B" stroke-width="5.5" cx="50" cy="50" r="30" fill="none" pathLength="100" />
        <text id="progress--text" x="50" y="48" text-anchor="middle" dominant-baseline="middle">0%</text>
        <text id="progress--text-second" class="progress--text--second" x="50" y="55" text-anchor="middle" dominant-baseline="middle" transform="rotate(90 50 50)">Poziom 1</text>

    </svg>
</div>

<style>

</style>
@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="~/js/Progressbar.js"></script>



    

    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const points = @Model.Points; // Pobierz punkty użytkownika z modelu
            const level = Math.floor(points / 200); // Oblicz poziom na podstawie punktów
            const progressInLevel = points % 200; // Oblicz postęp w danym poziomie
            const progressPercent = (progressInLevel / 200) * 100; // Oblicz procentowy postęp

            const meter = document.getElementById("progress--circle");
            const insideText = document.getElementById("progress--text");
            const insideTextSecond = document.getElementById("progress--text-second");

            insideText.textContent = `${progressPercent.toFixed(0)}%`;
            insideTextSecond.textContent = `Poziom ${level + 1}`;
            meter.style.strokeDashoffset = 100 - progressPercent;

            if (progressPercent === 0) {
                meter.style.stroke = "none";
            } else {
                meter.style.stroke = "#28411B";
            }
        });

    </script>
}